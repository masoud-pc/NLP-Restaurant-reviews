fdfdsf
clc
install.packages('caTools')
library('caTools')
set.seed(123)
split = sample.split(dataset$purchased, SplitRatio = 0.8) # in R we put the ratio of  train set
# Data Preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of missing value
dataset$Age = ifelse(
is.na(dataset$Age), #test
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),  #true
dataset$Age  #false
)
dataset$Salary = ifelse(
is.na(dataset$Salary), #test
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),  #true
dataset$Salary  #false
)
# Encoding the categorical data
dataset$Country = factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3)
)
dataset$Purchased = factor(dataset$Purchased,
levels = c('No','Yes'),
labels = c(0,1)
)
# Splitting the dataset into training set and test set
# install.packages('caTools')
library('caTools')  #activating and selecting the library
set.seed(123)
split = sample.split(dataset$purchased, SplitRatio = 0.8) # in R we put the ratio of  train set
# Data Preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of missing value
dataset$Age = ifelse(
is.na(dataset$Age), #test
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),  #true
dataset$Age  #false
)
dataset$Salary = ifelse(
is.na(dataset$Salary), #test
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),  #true
dataset$Salary  #false
)
# Encoding the categorical data
dataset$Country = factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3)
)
dataset$Purchased = factor(dataset$Purchased,
levels = c('No','Yes'),
labels = c(0,1)
)
# Splitting the dataset into training set and test set
# install.packages('caTools')
library('caTools')  #activating and selecting the library
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8) # in R we put the ratio of  train set
# Data Preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of missing value
dataset$Age = ifelse(
is.na(dataset$Age), #test
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),  #true
dataset$Age  #false
)
dataset$Salary = ifelse(
is.na(dataset$Salary), #test
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),  #true
dataset$Salary  #false
)
# Encoding the categorical data
dataset$Country = factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3)
)
dataset$Purchased = factor(dataset$Purchased,
levels = c('No','Yes'),
labels = c(0,1)
)
# Splitting the dataset into training set and test set
# install.packages('caTools')
library('caTools')  #activating and selecting the library
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8) # in R we put the ratio of  train set
dataset = read.csv('Data.csv')
# Data Preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of missing value
dataset$Age = ifelse(
is.na(dataset$Age), #test
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),  #true
dataset$Age  #false
)
dataset$Salary = ifelse(
is.na(dataset$Salary), #test
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),  #true
dataset$Salary  #false
)
# Encoding the categorical data
dataset$Country = factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3)
)
dataset$Purchased = factor(dataset$Purchased,
levels = c('No','Yes'),
labels = c(0,1)
)
# Splitting the dataset into training set and test set
# install.packages('caTools')
library('caTools')  #activating and selecting the library
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8) # in R we put the ratio of  train set
dataset = read.csv('Data.csv')
read.csv(Data.csv)
library(readr)
Position_Salaries <- read_csv("Desktop/A/Data Science and ML/Udemy course/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 9 - Random Forest Regression/Random_Forest_Regression/Position_Salaries.csv")
View(Position_Salaries)
# Upper Confidence Bound
# Importing the dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing UCB
N = 10000
d = 10
ads_selected = integer(0)
numbers_of_selections = integer(d)
sums_of_rewards = integer(d)
total_reward = 0
for (n in 1:N) {
ad = 0
max_upper_bound = 0
for (i in 1:d) {
if (numbers_of_selections[i] > 0) {
average_reward = sums_of_rewards[i] / numbers_of_selections[i]
delta_i = sqrt(3/2 * log(n) / numbers_of_selections[i])
upper_bound = average_reward + delta_i
} else {
upper_bound = 1e400
}
if (upper_bound > max_upper_bound) {
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = append(ads_selected, ad)
numbers_of_selections[ad] = numbers_of_selections[ad] + 1
reward = dataset[n, ad]
sums_of_rewards[ad] = sums_of_rewards[ad] + reward
total_reward = total_reward + reward
}
# Visualising the results
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
install.packages('tm')
install.packages('SnowballC')
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
setwd("~/Desktop/A/Data Science and ML/Machine Learning/Udemy course/Machine Learning A-Z Template Folder/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing/Natural_Language_Processing")
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
View(dataset_original)
corpus = tm_map(corpus, content_transformer(tolower))
View(corpus)
corpus[1]
corpus[[1]]
as.character(corpus[[1]])
as.character(corpus[[841]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removeNumbers)
as.character(corpus[[841]])
corpus = tm_map(corpus, removePunctuation)
as.character(corpus[[841]])
corpus = tm_map(corpus, removeWords, stopwords())
as.character(corpus[[841]])
corpus = tm_map(corpus, stemDocument)
as.character(corpus[[841]])
corpus = tm_map(corpus, stripWhitespace)
as.character(corpus[[841]])
corpus
dtm = DocumentTermMatrix(corpus)
View(dtm)
یفو
dtm
dtm = removeSparseTerms(dtm, 0.999)
dtm
dataset = as.data.frame(as.matrix(dtm))
View(dataset)
# Natural Language Processing
# Importing the dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
# Cleaning the texts
# install.packages('tm')
# install.packages('SnowballC')
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Creating the Bag of Words model
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Importing the dataset
#dataset = read.csv('Social_Network_Ads.csv')
#dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
# Natural Language Processing
# Importing the dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
# Cleaning the texts
# install.packages('tm')
# install.packages('SnowballC')
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Creating the Bag of Words model
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Importing the dataset
#dataset = read.csv('Social_Network_Ads.csv')
#dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
install.packages('randomForest')
# Natural Language Processing
# Importing the dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
# Cleaning the texts
# install.packages('tm')
# install.packages('SnowballC')
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Creating the Bag of Words model
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Importing the dataset
#dataset = read.csv('Social_Network_Ads.csv')
#dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
y_pred = predict(classifier, newdata = test_set[-692])
cm = table(test_set[, 692], y_pred)
cm
